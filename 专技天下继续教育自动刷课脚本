// ==UserScript==
// @name         专技天下继续教育自动刷课脚本最终版
// @namespace    http://tampermonkey.net/
// @version      2.5
// @description  修复静音问题、刷新后播放问题和状态面板显示问题，增加视频播放监控和剩余时间冻结检测
// @author       X.Liam
// @match        https://*.zgzjzj.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_addStyle
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // 创建状态面板
    const statusPanel = createStatusPanel();
    let startTime = new Date();
    let antiSleepLastTime = new Date();
    let video, nextButton;
    let isProcessingNext = false;
    let retryCount = 0;
    let isInitialized = false;

    // 新增：剩余时间冻结检测相关变量
    let lastRemainingTime = null;          // 上次记录的剩余时间（秒）
    let lastChangeTime = new Date();       // 上次剩余时间变化的时间戳
    let frozenCheckInterval;               // 冻结检测定时器
    const FROZEN_TIMEOUT = 5 * 60 * 1000;  // 5分钟超时

    // 初始化函数
    function init() {
        if (isInitialized) return;
        isInitialized = true;

        statusPanel.updateStatus('初始化中...');
        console.log('脚本初始化开始');

        // 重置状态
        isProcessingNext = false;
        retryCount = 0;

        // 确保状态面板可见
        ensureStatusPanelVisible();

        // 设置事件监听
        setupEventListeners();

        // 初始化视频播放器
        initVideo();

        // 查找下一节按钮
        findNextButton();

        // 启动定时器
        startTimers();

        // 启动防休眠
        startAntiSleep();

        // 启动视频播放监控
        startVideoPlaybackMonitor();

        // 新增：启动剩余时间冻结检测
        startFrozenTimeDetection();
    }

    // 新增：启动剩余时间冻结检测
    function startFrozenTimeDetection() {
        // 每分钟检查一次剩余时间是否冻结
        frozenCheckInterval = setInterval(() => {
            checkTimeFrozen();
        }, 60000); // 60秒检查一次

        console.log('启动剩余时间冻结检测');
    }

    // 新增：检查剩余时间是否冻结
    function checkTimeFrozen() {
        if (!lastRemainingTime) {
            console.log('冻结检测: 尚未记录剩余时间，跳过检查');
            return;
        }

        const currentTime = new Date();
        const elapsed = currentTime - lastChangeTime;

        if (elapsed > FROZEN_TIMEOUT) {
            console.warn(`冻结检测: 剩余时间已超过${FROZEN_TIMEOUT/60000}分钟未变化，刷新页面`);
            statusPanel.updateStatus(`检测到冻结，刷新页面`);

            // 停止检测定时器
            clearInterval(frozenCheckInterval);

            // 刷新页面
            setTimeout(() => {
                location.reload();
            }, 3000);
        } else {
            console.log(`冻结检测: 剩余时间正常变化（${Math.floor(elapsed/1000)}秒内）`);
            statusPanel.updateStatus(`冻结检测正常`);
        }
    }

    // 新增：启动视频播放监控
    function startVideoPlaybackMonitor() {
        // 每分钟检查视频播放状态
        setInterval(() => {
            monitorVideoPlayback();
        }, 60000); // 60秒检查一次

        // 立即执行一次检查
        setTimeout(monitorVideoPlayback, 5000);
    }

    // 新增：监控视频播放状态
    function monitorVideoPlayback() {
        if (!video) {
            console.log('视频监控: 未找到视频元素');
            return;
        }

        console.log('视频监控: 检查视频状态');
        statusPanel.updateStatus('视频状态检查中...');

        // 检查视频是否暂停
        if (video.paused) {
            console.log('视频监控: 视频暂停，尝试恢复播放');
            playVideo();
        } else {
            console.log('视频监控: 视频播放正常');
            statusPanel.updateStatus('视频播放中');
        }
    }

    // 确保状态面板可见
    function ensureStatusPanelVisible() {
        const panel = document.getElementById('auto-study-status');
        if (panel) {
            panel.style.display = 'block';
        }
    }

    // 自动播放修复增强版
    function initVideo() {
        console.log('初始化视频播放器');

        // 尝试多种可能的视频选择器
        const videoSelectors = [
            'video',
            'object',
            'embed',
            'iframe',
            '.video-player',
            '.vjs-tech',
            '#video-element',
            '.video-js'
        ];

        for (const selector of videoSelectors) {
            video = document.querySelector(selector);
            if (video) {
                console.log('找到视频元素:', selector);
                // 如果是iframe，尝试获取内部视频
                if (video.tagName === 'IFRAME' && video.contentDocument) {
                    const innerVideo = video.contentDocument.querySelector('video');
                    if (innerVideo) {
                        video = innerVideo;
                        console.log('找到iframe内部视频元素');
                    }
                }
                break;
            }
        }

        if (!video) {
            console.error('未找到视频元素');
            statusPanel.updateStatus('错误: 未找到视频元素');
            if (retryCount < 5) {
                retryCount++;
                setTimeout(initVideo, 3000 * retryCount);
            }
            return;
        }

        // 重置重试计数器
        retryCount = 0;

        // 设置静音播放（强制设置多次确保生效）
        setVideoMuted();

        // 确保播放
        playVideo();

        // 监听暂停事件
        video.addEventListener('pause', function(e) {
            console.log('视频暂停事件触发');
            // 检查是否是手动暂停
            const isManualPause = e && typeof e.isTrusted !== 'undefined' && e.isTrusted;
            if (!isManualPause) {
                console.log('非手动暂停，尝试重新播放');
                // 延迟2秒后尝试重新播放
                setTimeout(playVideo, 2000);
            }
        });

        // 监听播放结束事件
        video.addEventListener('ended', function() {
            console.log('视频播放结束');
            goToNextSection();
        });

        // 监听视频加载等待
        video.addEventListener('waiting', function() {
            console.log('视频加载等待中');
            statusPanel.updateStatus('视频加载中...');
            setTimeout(function() {
                if (video && video.paused) {
                    console.log('加载等待后仍暂停，尝试播放');
                    playVideo();
                }
            }, 5000);
        });

        // 监听视频可以播放
        video.addEventListener('playing', function() {
            console.log('视频开始播放');
            statusPanel.updateStatus('视频播放中');
        });

        // 监听音量变化
        video.addEventListener('volumechange', function() {
            if (!video.muted) {
                console.log('检测到音量取消静音，重新设置静音');
                setVideoMuted();
            }
        });
    }

    // 设置视频静音（多次尝试确保生效）
    function setVideoMuted() {
        if (!video) return;

        console.log('设置视频静音');
        try {
            video.muted = true;
            video.volume = 0;

            // 多次设置确保生效
            setTimeout(() => {
                if (video) {
                    video.muted = true;
                    video.volume = 0;
                }
            }, 1000);

            setTimeout(() => {
                if (video) {
                    video.muted = true;
                    video.volume = 0;
                }
            }, 3000);
        } catch (e) {
            console.error('设置静音失败:', e);
        }
    }

    // 播放视频函数（增强版）
    function playVideo() {
        if (!video) {
            console.log('播放视频失败：无视频元素');
            return;
        }

        if (video.paused) {
            console.log('尝试播放视频');
            video.play().then(() => {
                console.log('视频播放成功');
                statusPanel.updateStatus('视频播放中');
                // 确保静音
                setVideoMuted();
            }).catch(e => {
                console.error('播放失败:', e);
                statusPanel.updateStatus('播放失败: ' + e.message);

                // 特殊处理常见的播放错误
                let retryDelay = 3000;
                if (e.name === 'NotAllowedError') {
                    // 权限问题，可能需要用户交互
                    retryDelay = 10000;
                    simulateUserInteraction();
                } else if (e.name === 'NetworkError') {
                    // 网络问题，等待更长时间
                    retryDelay = 15000;
                }

                setTimeout(playVideo, retryDelay);
            });
        }
    }

    // 模拟用户交互（解决播放权限问题）
    function simulateUserInteraction() {
        console.log('模拟用户交互');
        const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window
        });

        // 尝试在视频元素上触发点击
        if (video) {
            video.dispatchEvent(clickEvent);
        }

        // 在文档主体上触发点击
        document.body.dispatchEvent(clickEvent);
    }

    // 创建状态面板（确保样式正确应用）
    function createStatusPanel() {
        // 先移除可能存在的旧面板
        const oldPanel = document.getElementById('auto-study-status');
        if (oldPanel) {
            oldPanel.remove();
        }

        // 创建面板容器
        const panel = document.createElement('div');
        panel.id = 'auto-study-status';
        panel.style.position = 'fixed';
        panel.style.top = '10px';
        panel.style.right = '10px';
        panel.style.zIndex = '99999'; // 确保最高层级
        panel.style.backgroundColor = 'rgba(44, 62, 80, 0.95)';
        panel.style.color = 'white';
        panel.style.padding = '15px';
        panel.style.borderRadius = '10px';
        panel.style.fontFamily = "'Microsoft YaHei', sans-serif";
        panel.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';
        panel.style.minWidth = '280px';
        panel.style.border = '2px solid #3498db';
        panel.style.display = 'block'; // 确保显示

        // 面板HTML结构
        panel.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid rgba(255,255,255,0.2); padding-bottom: 10px; margin-bottom: 10px;">
                <div style="font-weight: bold; font-size: 18px;">专技天下刷课助手 v2.5</div>
                <div id="auto-study-status-current-time">${new Date().toTimeString().substr(0, 8)}</div>
            </div>
            <div style="display: grid; grid-template-columns: 100px 1fr; gap: 8px;">
                <div>当前状态:</div>
                <div id="auto-study-status-text" style="font-weight: bold; color: #2ecc71;">初始化中...</div>

                <div>剩余时间:</div>
                <div id="auto-study-status-time">--:--</div>

                <div>防休眠:</div>
                <div id="auto-study-status-anti">已激活</div>

                <div>运行时长:</div>
                <div id="auto-study-status-runtime">00:00:00</div>

                <div>下一节:</div>
                <div id="auto-study-status-next">准备中</div>

                <div>冻结检测:</div>
                <div id="auto-study-status-frozen">正常</div>
            </div>
        `;

        document.body.appendChild(panel);
        console.log('状态面板创建完成');

        return {
            element: panel,
            updateStatus: function(text) {
                const el = document.getElementById('auto-study-status-text');
                if (el) {
                    el.textContent = text;
                    console.log('状态更新:', text);
                }
            },
            updateTime: function(time) {
                const el = document.getElementById('auto-study-status-time');
                if (el) el.textContent = time;
            },
            updateAntiSleep: function(status) {
                const el = document.getElementById('auto-study-status-anti');
                if (el) el.textContent = status;
            },
            updateRuntime: function(runtime) {
                const el = document.getElementById('auto-study-status-runtime');
                if (el) el.textContent = runtime;
            },
            updateNext: function(status) {
                const el = document.getElementById('auto-study-status-next');
                if (el) el.textContent = status;
            },
            // 新增：更新冻结检测状态
            updateFrozen: function(status) {
                const el = document.getElementById('auto-study-status-frozen');
                if (el) el.textContent = status;
            }
        };
    }

    // 设置事件监听（增强版）
    function setupEventListeners() {
        console.log('设置事件监听器');

        // 页面可见性变化
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible') {
                console.log('标签页恢复前台');
                statusPanel.updateStatus('标签页恢复前台');
                // 确保视频继续播放
                if (video && video.paused) {
                    setTimeout(playVideo, 1000);
                }
            } else {
                console.log('标签页在后台运行');
                statusPanel.updateStatus('标签页在后台运行');
            }
        });

        // 监听页面刷新事件
        window.addEventListener('beforeunload', function() {
            console.log('页面即将刷新');
            GM_setValue('lastRefreshTime', new Date().getTime());
        });

        // 检查是否是刷新后的页面
        const lastRefreshTime = GM_getValue('lastRefreshTime', 0);
        const currentTime = new Date().getTime();
        if (currentTime - lastRefreshTime < 5000) {
            console.log('检测到页面刷新');
            statusPanel.updateStatus('页面刷新后恢复');

            // 刷新后延迟初始化
            setTimeout(() => {
                initVideo();
                findNextButton();
            }, 2000);
        }

        // 监听DOM变化，防止状态面板被移除
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (!document.getElementById('auto-study-status')) {
                    console.log('状态面板被移除，重新创建');
                    createStatusPanel();
                }
            });
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    // 查找下一节按钮（增强版）
    function findNextButton() {
        console.log('查找下一节按钮');
        // 尝试多种可能的按钮选择器
        const selectors = [
            'li.nextdontcheatorshit',
            '.next-btn',
            '.next-button',
            '.btn-next',
            '.next',
            '.next-section',
            '.nextButton',
            '.nextBtn',
            '.section-next',
            'a.next',
            'button.next',
            '.btn-next-section'
        ];

        for (const selector of selectors) {
            nextButton = document.querySelector(selector);
            if (nextButton) {
                console.log('找到下一节按钮:', selector);
                statusPanel.updateStatus('下一节按钮已找到');
                return;
            }
        }

        console.warn('未找到下一节按钮');
        statusPanel.updateStatus('警告: 未找到下一节按钮');
        setTimeout(findNextButton, 5000);
    }

    // 启动定时器（保持不变）
    function startTimers() {
        console.log('启动定时器');
        // 主定时器 - 每秒更新状态
        setInterval(function() {
            // 更新当前时间
            const now = new Date();
            const timeStr = now.toTimeString().substr(0, 8);
            const timeEl = document.getElementById('auto-study-status-current-time');
            if (timeEl) timeEl.textContent = timeStr;

            // 更新运行时间
            const runtime = Math.floor((now - startTime) / 1000);
            const hours = Math.floor(runtime / 3600).toString().padStart(2, '0');
            const minutes = Math.floor((runtime % 3600) / 60).toString().padStart(2, '0');
            const seconds = (runtime % 60).toString().padStart(2, '0');
            statusPanel.updateRuntime(`${hours}:${minutes}:${seconds}`);

            // 检查剩余时间
            checkRemainingTime();
        }, 1000);
    }

    // 检查剩余时间（增强版）
    function checkRemainingTime() {
        try {
            const timeSelectors = [
                'div.vjs-remaining-time',
                '.video-time-remaining',
                '.time-remaining',
                '.duration-remaining',
                '.remaining-time',
                '.left-time',
                '.time-left'
            ];

            let timeElement;
            for (const selector of timeSelectors) {
                timeElement = document.querySelector(selector);
                if (timeElement) break;
            }

            if (!timeElement) return;

            const timeText = timeElement.textContent.trim();
            const match = timeText.match(/(\d+):(\d+)/);

            if (match) {
                const minutes = parseInt(match[1]);
                const seconds = parseInt(match[2]);
                const totalSeconds = minutes * 60 + seconds;

                // 新增：检测剩余时间是否变化
                if (lastRemainingTime === null) {
                    // 首次记录
                    lastRemainingTime = totalSeconds;
                    lastChangeTime = new Date();
                    console.log(`冻结检测: 初始化剩余时间 ${totalSeconds}秒`);
                    statusPanel.updateFrozen(`正常`);
                } else if (lastRemainingTime !== totalSeconds) {
                    // 剩余时间发生变化
                    console.log(`冻结检测: 剩余时间变化 ${lastRemainingTime}秒 -> ${totalSeconds}秒`);
                    lastRemainingTime = totalSeconds;
                    lastChangeTime = new Date();
                    statusPanel.updateFrozen(`正常`);
                } else {
                    // 剩余时间未变化
                    const elapsed = Math.floor((new Date() - lastChangeTime) / 1000);
                    console.log(`冻结检测: 剩余时间未变化 (${elapsed}秒)`);
                    statusPanel.updateFrozen(`${elapsed}秒未变`);
                }

                // 更新状态面板
                statusPanel.updateTime(`${minutes}:${seconds.toString().padStart(2, '0')}`);

                // 少于5秒自动跳转
                if (totalSeconds >= 1 && totalSeconds <= 5) {
                    statusPanel.updateNext('即将跳转');
                    goToNextSection();
                } else {
                    statusPanel.updateNext(`约${minutes}分钟后`);
                }
            }
        } catch (e) {
            console.error('检查剩余时间出错:', e);
        }
    }

    // 跳转到下一节（增强版）
    function goToNextSection() {
        if (isProcessingNext) {
            console.log('跳转操作已在进行中，跳过');
            return;
        }

        isProcessingNext = true;
        console.log('开始跳转到下一节');
        statusPanel.updateStatus('正在跳转到下一节...');

        // 延迟5秒后再执行跳转
        setTimeout(function() {
            if (nextButton) {
                console.log('点击下一节按钮');
                nextButton.click();
            } else {
                // 如果找不到按钮，尝试使用备用方法
                const nextLink = findNextSectionLink();
                if (nextLink) {
                    console.log('点击下一节链接');
                    nextLink.click();
                } else {
                    // 最终回退方案
                    console.log('未找到下一节链接，刷新页面');
                    statusPanel.updateStatus('未找到下一节链接，刷新页面');
                    location.reload();
                    return;
                }
            }

            // 重置状态
            setTimeout(() => {
                console.log('跳转后重置状态');
                statusPanel.updateStatus('运行中');
                initVideo();
                findNextButton();
                isProcessingNext = false;
            }, 5000); // 额外等待5秒确保页面加载完成
        }, 5000); // 点击前等待5秒
    }

    // 查找下一节链接（增强版）
    function findNextSectionLink() {
        console.log('查找下一节链接');
        const linkSelectors = [
            'a.next-link',
            'a.next',
            'a.next-section',
            '.next-link',
            '.next-section-link',
            '.section-next-link',
            'a[title="下一节"]',
            'a[title="Next"]'
        ];

        for (const selector of linkSelectors) {
            const link = document.querySelector(selector);
            if (link) {
                console.log('找到下一节链接:', selector);
                return link;
            }
        }

        // 尝试从导航菜单中寻找
        const navLinks = document.querySelectorAll('.nav-link, .menu-item, .chapter-item, .course-item');
        for (const link of navLinks) {
            const linkText = (link.textContent || '').toLowerCase();
            if (linkText.includes('下一节') || linkText.includes('下一课') ||
                linkText.includes('next') || linkText.includes('继续') ||
                linkText.includes('下一章')) {
                console.log('从导航菜单找到下一节链接:', linkText);
                return link;
            }
        }

        console.log('未找到下一节链接');
        return null;
    }

    // 启动防休眠（保持不变）
    function startAntiSleep() {
        console.log('启动防休眠');
        // 每分钟随机执行防休眠操作
        setInterval(() => {
            performAntiSleepAction();
        }, 60000 + Math.random() * 30000);

        // 立即执行一次
        setTimeout(performAntiSleepAction, 5000);
    }

    // 执行防休眠操作（保持不变）
    function performAntiSleepAction() {
        console.log('执行防休眠操作');
        const actions = [
            simulateMouseMove,
            simulateKeyPress,
            simulateElementClick
        ];

        // 随机选择一种操作
        const action = actions[Math.floor(Math.random() * actions.length)];
        action();

        // 更新状态
        const now = new Date();
        const timeStr = now.toTimeString().substr(0, 8);
        statusPanel.updateAntiSleep(`${timeStr}活跃`);
    }

    // 模拟鼠标移动（保持不变）
    function simulateMouseMove() {
        const x = Math.random() * window.innerWidth;
        const y = Math.random() * window.innerHeight;

        document.dispatchEvent(new MouseEvent('mousemove', {
            view: window,
            bubbles: true,
            clientX: x,
            clientY: y
        }));
    }

    // 模拟按键（保持不变）
    function simulateKeyPress() {
        const keys = ['Shift', 'Control', 'Alt', 'Meta', 'Tab'];
        const key = keys[Math.floor(Math.random() * keys.length)];

        document.dispatchEvent(new KeyboardEvent('keydown', {
            key: key,
            bubbles: true
        }));

        setTimeout(() => {
            document.dispatchEvent(new KeyboardEvent('keyup', {
                key: key,
                bubbles: true
            }));
        }, 100);
    }

    // 模拟元素点击（保持不变）
    function simulateElementClick() {
        const elements = document.querySelectorAll('button, a');
        if (elements.length > 0) {
            const randomIndex = Math.floor(Math.random() * elements.length);
            const element = elements[randomIndex];

            // 创建并触发点击事件
            const event = new MouseEvent('click', {
                view: window,
                bubbles: true,
                cancelable: true
            });

            element.dispatchEvent(event);
        }
    }

    // 初始化脚本（增强版）
    function delayedInit() {
        // 延迟3秒初始化，确保页面完全加载
        console.log('延迟初始化开始');
        setTimeout(() => {
            // 再次检查状态面板是否存在
            if (!document.getElementById('auto-study-status')) {
                createStatusPanel();
            }
            init();
        }, 3000);
    }

    // 监听页面加载和刷新事件
    if (document.readyState === 'complete') {
        console.log('文档已加载完成，开始初始化');
        delayedInit();
    } else {
        console.log('等待文档加载完成');
        window.addEventListener('load', delayedInit);
    }

    // 添加控制台日志以便调试
    console.log('专技天下刷课助手已加载');
})();
